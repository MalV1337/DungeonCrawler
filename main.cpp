#include "GameEngine.h"

void play() {
    string level = "level1.txt";
    ifstream save;
    save.open(level);
    if (!save.good()) {
        cerr << "File cannot be found!" << endl;
    }
    int hoehe, breite;
    save >> hoehe >> breite;
    vector<string> data;
    vector<string> links;
    string line;
    for (int i = 0; i < hoehe; i++) {
        getline(save, line);
        if (line != "") //leere Zeilen ignorieren
            data.push_back(line);
        else
            i--; //wenn noch nicht am ende der Karte angekommen, leere zeilen ignorieren
    }
    do {
        getline(save, line);
        if (line != "") //leere Zeilen ignorieren
            links.push_back(line);
    } 
    while (save.good());

    save.close();

    GameEngine ge(hoehe, breite, data, links);

    while (ge.menue()) {
    }
}

int main(int argc, char** argv) {
    try {

        play();


    } catch (const out_of_range& ooa) {
        cerr << ooa.what() << endl;
    } catch (const invalid_argument& ia) {
        cerr << ia.what() << endl;
    } catch (const bad_cast& bc) {
        cerr << bc.what() << endl;
    } catch (const runtime_error& re) {
        cerr << re.what() << endl;
    }    catch (const bad_alloc& ba) {
        cerr << ba.what() << endl;
    }

    return 0;
}

//        vector<string> data2{             /*Protoype and Developement */
//            "##########",
//            "####..#..#",                 DungeonMap d1(10,10,data2);
//            "###...X..#", // 2,6 Door X
//            "##....####", // 4,6 Switch ?
//            "#.....?..#",
//            "#.......?#", // 5,8 Switch X
//            "####X#####", // 6,4 Door X
//            "#........#",
//            "#........#",
//            "##########",}; // Standardmap

//        vector<string> data9{
//            "#####################################################", //0
//            "#...?....###################################....?...#", //1   
//            "#........X................?................X........#", //2
//            "#........X.................................X........#", //3
//            "#........#################X#################........#", //4
//            "#.......?######.......####.####........#####?.......#", //5
//            "#........######.......####.####........#####........#", //6
//            "#........######......X####.####X.......#####........#", //7
//            "#?......?#############..##.##..#############?......?#", //8
//            "#.##XX##.###############.#.#.###############.##XX##.#", //9
//            "#.##..##.################...################.##..##.#", //10
//            "#.##..##.....................................##..##.#", //11
//            "#.....##.......###########.##########........##.....#", //12   
//            "####..##?......###########.##########.......?##..####", //13
//            "####..##.......###########.##########........##..####",
//            "####..####################.####################..####",
//            "#........#################.#################........#",
//            "#........#################.#################........#",
//            "#........#################.#################........#",
//            "#...................................................#",
//            "#...................................................#",
//            "#........###################################........#",
//            "#####################################################"};
//        vector<string> data3{
//            "####################",
//            "#......#############",
//            "#..#.#.............#",
//            "####.###############",
//            "#..................#",
//            "#..................#",
//            "#..................#",
//            "#..................#",
//            "#..................#",
//            "#..................#",
//            "#..................#",
//            "#..................#",
//            "#..................#",
//            "#########.##########",
//            "#..................#",
//            "#..................#",
//            "#..................#",
//            "#..................#",
//            "#..................#",
//            "####################",};


//vector<string> DandS{"2 6 4 6",
//    "6 4 5 8"}; //FÃ¼r 10x10 Map
//GameEngine ge(10, 10, data2, DandS);
//vector<string> BigDandS{"2 9 1 4",
//            "3 9 5 8",
//            "9 4 8 1",
//            "9 5 8 8",
//            "4 26 2 26",
//            "7 21 13 8",
//            "7 31 13 44",
//            "2 43 1 48",
//            "3 43 5 44",
//            "9 47 8 44", //
//            "9 48 8 51",};
//vector<string> polyTilesTestFile1{
//            "Character @ 5 5 ConsoleController 9 9",
//            "Character % 2 2 StationaryController 3 4",
//            "Greatsword 1 4",
//            "Door 13 9 Lever 11 9",
//            "Trap 10 9",};
//GameEngine ge(23, 53, data9, BigDandS);
//GameEngine ge(20,20,data3);
//ge.run();

